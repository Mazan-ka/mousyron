ОСНОВНАЯ ГРАММАТИКА и для нетерминала assign
  lang -> expr+
  expr+ -> assign | while_keyword | isLinked_List
  assign -> VAR ASSIGN_OP expr_value
  expr_value -> value (op_value)*
  op_value -> OP value
  value -> DIGIT | VAR

  #Грамматика для цикла while
  while_keyword -> WHILE_KW condition_while body_while
  condition_while -> \\( compare \\) | \\( VAR_BOOL \\)
  body_while -> START_WHILE expr+ FINISH_WHILE
  compare -> value OP_BOOL value

  #Грамматика для бесконечных скобок:
  expr_value -> inf_Parenthesis_val | val_inf_Parenthesis -- заменяет обычный expr_value
  inf_Parenthesis_val -> L_BR expr_value R_BR (OP expr_value)*
  val_inf_Parenthesis -> value (OP (value | inf_Parenthesis_val) )*

  Проверка для бесконечных скобок:
  a = 7 * (100 + b)
  b = (7 + c) * a
  a = ((100 + b) * (100 + 3)) * (a + c)

  #Грамматика для условия if
  condition_if -> IF_KEYWORD L_BR compare R_BR START_WHILE expr+ FINISH_WHILE (ELSE_KW START_WHILE expr+ FINISH_WHILE)?

  #Грамматика для LinkedList
  isLinked_list -> LINKED_LIST_DEF

  Сначала из  инфиксной формы в постфиксную алгоритмом дейкстры, далее после преобразования в стек машину для вычисления
    a = a + 1 + 3 - 100 + 4  ->  a a 1 + 3 + 100 - 4 + =

  Полис для if/for/while:
  p! - метка безусловный переход на метку p
  bp!F - условный переход по лжи, b - boolean

  if (a>b) {a=1} else {b=4} ->
  ab > p1!F a1= p2! b 4 = t (перевёрнутая, признак конца полиса)
  01 2 3 4  567 8 9 10111213
